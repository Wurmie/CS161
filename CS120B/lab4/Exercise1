/*
wlee030_lab4_part1.c

 *

 * Created: 2/3/2015 11:57:46 AM

 *  Author: Luiz

 */ 

#include <avr/io.h>

#include <avr/interrupt.h>

#include <avr/io.h>

#include "\Users\student\Downloads\ttm\llope039_lab4_part1\io.c"

// TimerISR() sets this to 1. C programmer should clear to 0.

volatile unsigned char TimerFlag = 0;

// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.

unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1 ms.

unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

void TimerOn() {

	// AVR timer/counter controller register TCCR1

	// bit3 = 0: CTC mode (clear timer on compare)

	// bit2bit1bit0=011: pre-scaler /64

	// 00001011: 0x0B

	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s

	// Thus, TCNT1 register will count at 125,000 ticks/s

	TCCR1B = 0x0B;

	// AVR output compare register OCR1A.

	// Timer interrupt will be generated when TCNT1==OCR1A

	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125

	// So when TCNT1 register equals 125,

	// 1 ms has passed. Thus, we compare to 125.

	OCR1A = 125;// AVR timer interrupt mask register

	// bit1: OCIE1A -- enables compare match interrupt

	TIMSK1 = 0x02;

	//Initialize avr counter

	TCNT1=0;

	// TimerISR will be called every _avr_timer_cntcurr milliseconds

	_avr_timer_cntcurr = _avr_timer_M;

	//Enable global interrupts: 0x80: 1000000

	SREG |= 0x80;

}

void TimerOff() {

	// bit3bit1bit0=000: timer off

	TCCR1B = 0x00;

}

void TimerISR() {

	TimerFlag = 1;

}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()

ISR(TIMER1_COMPA_vect) {

	// CPU automatically calls when TCNT1 == OCR1

	// (every 1 ms per TimerOn settings)

	// Count down to 0 rather than up to TOP (results in a more efficient comparison)

	_avr_timer_cntcurr--;

	if (_avr_timer_cntcurr == 0) {

		// Call the ISR that the user uses

		TimerISR();

		_avr_timer_cntcurr = _avr_timer_M;

	}

}

// Set TimerISR() to tick every M ms

void TimerSet(unsigned long M) {

	_avr_timer_M = M;

	_avr_timer_cntcurr = _avr_timer_M;

}









unsigned char count;

unsigned char out;



enum states{inti, wait,prsff_a0, prsff_a1, clr} states;

void plus()

{

	

	switch(states)

	{

		case inti:

		states = wait;

		LCD_WriteData(out + '0');

		break;

		

		case wait:

		count = 0;

		if(!(~PINA & 0x01) && !(~PINA & 0x02))

		{

			states = wait;

		}

		if((~PINA & 0x01) && (~PINA & 0x02))

		{

			states = clr;

		}

		if(~PINA & 0x01 && !(~PINA & 0x02))

		{

			states = prsff_a0;

		}

		if(~PINA & 0x02  && !(~PINA & 0x01))

		{

			states = prsff_a1;

		}

		break;

		

		case prsff_a0:

		if(count == 2)count = 0;

		if(out < 9 && count == 0)

		{

			++out;

			LCD_Cursor(1);

			LCD_WriteData(out + '0');

			LCD_Cursor(2);

		}

		

		if ((~PINA & 0x01)) {

			++count;

			states = prsff_a0;

		}

		else if (!(~PINA & 0x01)) {

			states = wait;

		}

		break;

			

		case prsff_a1:

		if(count == 2)count = 0;

		if(out > 0 && count == 0)

		{

			--out;

			LCD_Cursor(1);

			LCD_WriteData(out + '0');

			LCD_Cursor(2);

		}

		if ((~PINA & 0x02)) {	

			++count;				

			states = prsff_a1;

		}

		else if (!(~PINA & 0x02)) {

			states = wait;

		}

		break;

		

		case clr:

		count = 0x00;

		out = 0x00;

		LCD_Cursor(1);

		LCD_WriteData(out + '0');

		LCD_Cursor(2);

		states = wait;

		break;

	}

	

}



int main(void)

{

	count = 0x00;

	out = 0x00;

	DDRA = 0x00;

	PORTA = 0xFF;

	states = inti;

	DDRC = 0xFF; PORTC = 0x00; // LCD data lines

	DDRD = 0xFF; PORTD = 0x00; // LCD control lines

	// Initializes the LCD display

	LCD_init();

	TimerSet(500);

	TimerOn();

    while(1)

    {

        plus();

		while (!TimerFlag);

		TimerFlag = 0;

    }

}
