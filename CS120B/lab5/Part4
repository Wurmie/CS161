/* William Lee <wlee030@ucr.edu>

*  Luiz Lopez <yli066@ucr.edu>

*  Assignment: Lab 5 Part 3

*  Lab: 022


* I acknowledge all content contained herein, excluding template or example

* code, is my own original work.

*/

#include <avr/io.h>
#include <avr/interrupt.h>

// TimerISR() sets this to 1. C programmer should clear to 0.
volatile unsigned char TimerFlag = 0;
// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1 ms.
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks
void TimerOn() {
	// AVR timer/counter controller register TCCR1
	// bit3 = 0: CTC mode (clear timer on compare)
	// bit2bit1bit0=011: pre-scaler /64
	// 00001011: 0x0B
	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT1 register will count at 125,000 ticks/s
	TCCR1B = 0x0B;
	// AVR output compare register OCR1A.
	// Timer interrupt will be generated when TCNT1==OCR1A
	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
	// So when TCNT1 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	OCR1A = 125;// AVR timer interrupt mask register
	// bit1: OCIE1A -- enables compare match interrupt
	TIMSK1 = 0x02;
	//Initialize avr counter
	TCNT1=0;
	// TimerISR will be called every _avr_timer_cntcurr milliseconds
	_avr_timer_cntcurr = _avr_timer_M;
	//Enable global interrupts: 0x80: 1000000
	SREG |= 0x80;
}
void TimerOff() {
	// bit3bit1bit0=000: timer off
	TCCR1B = 0x00;
}
void TimerISR() {
	TimerFlag = 1;
}
// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1
	// (every 1 ms per TimerOn settings)
	// Count down to 0 rather than up to TOP (results in a more efficient comparison)
	_avr_timer_cntcurr--;
	if (_avr_timer_cntcurr == 0) {
		// Call the ISR that the user uses
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
	}
}
// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}

enum states {Start,LED0,LED1,LED2} state;
enum Blinkings {Start1,LED3,Blink1} Blinks;

unsigned char LEDs = 0x00;
unsigned char Blinkers= 0x00;
unsigned char speaker = 0x00;

unsigned char button1;

void theLED() {
	switch (state) { //Transitions
		case Start:
			state = LED0;
			LEDs = 0x01;
			break;
		case LED0:
			state = LED1;
			LEDs = 0x02;
			break;
		case LED1:
			state = LED2;
			break;
		case LED_2:
			state = LED0;
			LEDs = 0x04;
			break;
		default:
			PORTB = 0xFF;
			PORTB = 0xFF;
			break;
	}
}

void theBlinkers()
{
	switch(Blinkings)
	{
		case Start1:
			Blinks = LED3;
			break;
		case LED3:
			Blinkings = Blink_LED_1;
			Blinkers = 0x08;
			break;
		case Blink_LED_1:
			Blink_State = LED_3;
			Blinkers = 0x01;
			break;
		default:
			break;
	}
}

void CombineLEDs()
{
	PORTB = LEDs | Blinkers | speaker;
}

enum SPEAKERS {ON,OFF} SPEAKERS;
unsigned char speakerTimer = 0;

void Speaker()
{
	speakerTimer++;
	switch(SPEAKERS)
	{
		case ON:
			if(speakerTimer<3)
				SPEAKERS = ON;
		else
		{
			SPEAKERS = speaker_off;
			if(speakerTimer==4)
				speakerTimer = 0;
		}
		speaker = 0x10;
		break;
		case OFF:
			SPEAKERS = ON;
			speaker = 0x00;
			break;
		default:
			break;
	}
}

enum FREQUENCIES {START,FUP, FDOWN, UP, DOWN} FREQUENCIES;

void changeFrequency(unsigned char button1, unsigned char button2)
{
	if(!button1 && !button2 && (FREQUENCIES=START))
		return;
	switch(FREQUENCIES)
	{
		case START:
			if(button1)
				FREQUENCIES = FUP;
			else if(button2)
				FREQUENCIES = FDOWN;
			break;
		case FUP:
			FREQUENCIES = UP;
			break;
		case UP:
			if(currFreq <= 1)
				currFreq = 1;
			else
				currFreq--;
			FREQUENCIES = START;
			break;
		case FDOWN:
			FREQUENCIES = DOWN;
			break;
		case DOWN:
			currFreq++;
			FREQUENCIES = START;
			break;
	}
}
unsigned short elapsedtime = 0;

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; //button input
	DDRB = 0xFF; PORTB = 0x00; //LED
	
	TimerSet(1);
	TimerOn();
	State = Start1; //LEDss
	Blink_State = Start2; //BlinkingLEDs
	
	while (1) {
		button1 = ~PINA & 0x01;

		elapsedtime++;

		if(button1) //speaker logic
			Speaker();
		
		if(elapsedtime%300 == 0)
			theLED();

		if(elapsedtime%1000 == 0)
			theBlinkers();

		CombineLEDs();

		if(elapsedtime == 1000) //in order to keep data type to short
			elapsedtime = 0;

		while (!TimerFlag){}  // Wait for BL's period
		TimerFlag = 0;        // Lower flag
	}
}
