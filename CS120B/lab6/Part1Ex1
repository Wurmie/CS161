/* William Lee <wlee030@ucr.edu>

*  Luiz Lopez <llope039@ucr.edu>

*

*  Assignment: Lab 6 Part 1

*

* I acknowledge all content contained herein, excluding template or example

* code, is my own original work.

*/









#include <avr/io.h>

#include <avr/interrupt.h>



//analog-to-digital converter initialization

void ADC_init() {

	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);

	// ADEN: setting this bit enables analog-to-digital conversion.

	// ADSC: setting this bit starts the first conversion.

	// ADATE: setting this bit enables auto-triggering. Since we are

	// in Free Running Mode, a new conversion will trigger

	// whenever the previous conversion completes.

} 



//PWM initialization

// 0.954 hz is lowest frequency possible with this

// function, based on settings in PWM_on(). Passing 0 as

// the frequency stop the speaker from generating sound

// This code toggles PB6

void set_PWM(double frequency) {

	

	

	// Keeps track of the currently set frequency

	// Will only update the registers when the frequency

	// changes, plays music uninterrupted.

	static double current_frequency;

	if (frequency != current_frequency) {



		if (!frequency) TCCR3B &= 0x08; //stops timer/counter

		else TCCR3B |= 0x03; // resumes/continues timer/counter

		

		// prevents OCR3A from overflowing, using prescaler 64

		// 0.954 is smallest frequency that will not result in overflow

		if (frequency < 0.954) OCR3A = 0xFFFF;

		

		// prevents OCR3A from underflowing, using prescaler 64					// 31250 is largest frequency that will not result in underflow

		else if (frequency > 31250) OCR3A = 0x0000;

		

		// set OCR3A based on desired frequency

		else OCR3A = (short)(8000000 / (128 * frequency)) - 1;



		TCNT3 = 0; // resets counter

		current_frequency = frequency;

	}

}



void PWM_on() {

	TCCR3A = (1 << COM3A0);

	// COM3A0: Toggle PB6 on compare match between counter and OCR3A

	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);

	// WGM32: When counter (TCNT3) matches OCR3A, reset counter

	// CS31 & CS30: Set a prescaler of 64

	set_PWM(0);

}



void PWM_off() {

	TCCR3A = 0x00;

	TCCR3B = 0x00;

}



// TimerISR() sets this to 1. C programmer should clear to 0.

volatile unsigned char TimerFlag = 0;

// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.

unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1 ms.

unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

void TimerOn() {

	// AVR timer/counter controller register TCCR1

	// bit3 = 0: CTC mode (clear timer on compare)

	// bit2bit1bit0=011: pre-scaler /64

	// 00001011: 0x0B

	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s

	// Thus, TCNT1 register will count at 125,000 ticks/s

	TCCR1B = 0x0B;

	// AVR output compare register OCR1A.

	// Timer interrupt will be generated when TCNT1==OCR1A

	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125

	// So when TCNT1 register equals 125,

	// 1 ms has passed. Thus, we compare to 125.

	OCR1A = 125;// AVR timer interrupt mask register

	// bit1: OCIE1A -- enables compare match interrupt

	TIMSK1 = 0x02;

	//Initialize avr counter

	TCNT1=0;

	// TimerISR will be called every _avr_timer_cntcurr milliseconds

	_avr_timer_cntcurr = _avr_timer_M;

	//Enable global interrupts: 0x80: 1000000

	SREG |= 0x80;

}

void TimerOff() {

	// bit3bit1bit0=000: timer off

	TCCR1B = 0x00;

}

void TimerISR() {

	TimerFlag = 1;

}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()

ISR(TIMER1_COMPA_vect) {

	// CPU automatically calls when TCNT1 == OCR1

	// (every 1 ms per TimerOn settings)

	// Count down to 0 rather than up to TOP (results in a more efficient comparison)

	_avr_timer_cntcurr--;

	if (_avr_timer_cntcurr == 0) {

		// Call the ISR that the user uses

		TimerISR();

		_avr_timer_cntcurr = _avr_timer_M;

	}

}

// Set TimerISR() to tick every M ms

void TimerSet(unsigned long M) {

	_avr_timer_M = M;

	_avr_timer_cntcurr = _avr_timer_M;

}







int main(void)

{	

	DDRA = 0x00; PORTA = 0x00; //input

	DDRB = 0xFF; PORTB = 0x00; 
	DDRD = 0xFF; PORTD = 0x00; //Output 



	TimerSet(1);

	TimerOn();

	
	ADC_init();


	unsigned char input = 0x0000;

	unsigned short Boutput = 0x00;

	unsigned short Doutput = 0x00;



	while (1) {
		Boutput = 0x00;
		Doutput = 0x00;
		input = 0x00;

		input = ADC;

		Boutput = (char)input;
		Doutput = (char)((input>>8) & 0x03);
		
		PORTB = Boutput;
		PORTD = Doutput;

		while (!TimerFlag){}  
		TimerFlag = 0;        

	}

}
