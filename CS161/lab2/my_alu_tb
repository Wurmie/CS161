--------------------------------------------------------------------------------
-- Company:
-- Engineer:
--
-- Create Date:   21:10:35 01/14/2015
-- Design Name:
-- Module Name:   /home/csmajs/vnguy057/Desktop/Lab1_REDO/MY_ALU_8_BIT_TB.vhd
-- Project Name:  Lab1_REDO
-- Target Device:
-- Tool versions:
-- Description:
-- 
-- VHDL Test Bench Created by ISE for module: MY_ALU
-- 
-- Dependencies:
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Notes:
-- This testbench has been automatically generated using types std_logic and
-- std_logic_vector for the ports of the unit under test.  Xilinx recommends
-- that these types always be used for the top-level I/O of a design in order
-- to guarantee that the testbench will bind correctly to the post-implementation
-- simulation model.
--------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_unsigned.all;
USE ieee.numeric_std.ALL;
USE ieee.std_logic_arith.all;
 
ENTITY my_alu_8bit_tb IS
END my_alu_8bit_tb;
 
ARCHITECTURE behavior OF my_alu_8bit_tb IS
 
    COMPONENT my_alu
     generic(
        NUMBITS    : natural    := 32
     );
    PORT(
         A : IN  std_logic_vector;
         B : IN  std_logic_vector;
         opcode : IN  std_logic_vector(0 to 3);
         result : OUT  std_logic_vector(NUMBITS+3 downto 0);
            outtotal : OUT std_logic_vector(NUMBITS+3 downto 0);
         carry : OUT  std_logic;
         overflow : OUT  std_logic;
         zero : OUT  std_logic
        );
    END COMPONENT;
 

   --Inputs
   signal A : std_logic_vector(31 downto 0) := (others => '0');
   signal B : std_logic_vector(31 downto 00) := (others => '0');
   signal opcode : std_logic_vector(3 downto 0) := (others => '0');

     --Outputs
   signal result : std_logic_vector(35 downto 0);
   signal carry : std_logic;
   signal overflow : std_logic;
   signal zero : std_logic;
    signal outtotal : std_logic_vector(35 downto 0);
 
BEGIN
 
    -- Instantiate the Unit Under Test (UUT)
   uut: my_alu generic map(
        NUMBITS => 32

    )
    PORT MAP (
          A => A,
          B => B,
          opcode => opcode,
          result => result,
             outtotal => outtotal,
          carry => carry,
          overflow => overflow,
          zero => zero
        );


   -- Stimulus process
   stim_proc: process
   begin     
      -- hold reset state for 100ms.
        wait for 10 ns;
     
        -- --------------------------------------------------------------------------------
        -- --------------------------------------------------------------------------------
        -- Testing Unsigned Add
        -- --------------------------------------------------------------------------------
        -- --------------------------------------------------------------------------------
        report "Testing Unsigned Add";
        opcode <= "1000";
     
            -- Test 1
            A <= conv_std_logic_vector(2, 32);
            B <= conv_std_logic_vector(2, 32);
         
            wait for 10 ns;
            assert result = conv_std_logic_vector(4, 36)     report "Test_1: result incorrect"     severity Warning;
            assert carry = '0'                                 report "Test_1: carryout incorrect"    severity Warning;
            assert overflow = '0'                                 report "Test_1: overflow incorrect"    severity Warning;
            assert zero = '0'                                        report "Test_1: zero incorrect"        severity Warning;

            -- Test 2
            A <= conv_std_logic_vector(8, 32);
            B <= conv_std_logic_vector(2, 32);
         
            wait for 10 ns;
            assert result = conv_std_logic_vector(16, 36)     report "Test_2: result incorrect"     severity Warning;
            assert carry = '0'                                 report "Test_2: carryout incorrect"    severity Warning;
            assert overflow = '0'                                 report "Test_2: overflow incorrect"    severity Warning;
            assert zero = '0'                                        report "Test_2: zero incorrect"        severity Warning;
    
    	report "Testing Unsigned Sub";
        opcode <= "1001";
     
            -- Test 3
            A <= conv_std_logic_vector(2, 32);
            B <= conv_std_logic_vector(2, 32);
         
            wait for 10 ns;
            assert result = conv_std_logic_vector(0, 36)     report "Test_3: result incorrect"     severity Warning;
            assert carry = '0'                                 report "Test_3: carryout incorrect"    severity Warning;
            assert overflow = '0'                                 report "Test_3: overflow incorrect"    severity Warning;
            assert zero = '1'                                        report "Test_3: zero incorrect"        severity Warning;

            -- Test 4
            A <= conv_std_logic_vector(8, 32);
            B <= conv_std_logic_vector(2, 32);
         
            wait for 10 ns;
            assert result = conv_std_logic_vector(6, 36)     report "Test_4: result incorrect"     severity Warning;
            assert carry = '0'                                 report "Test_4: carryout incorrect"    severity Warning;
            assert overflow = '0'                                 report "Test_4: overflow incorrect"    severity Warning;
            assert zero = '0'                                        report "Test_4: zero incorrect"        severity Warning;

         -- Test 4
            A <= conv_std_logic_vector(35, 32);
            B <= conv_std_logic_vector(80, 32);
         
            wait for 10 ns;
            assert result = conv_std_logic_vector(277, 36)     report "Test_4: result incorrect"     severity Warning;
            assert carry = '0'                                 report "Test_4: carryout incorrect"    severity Warning;
            assert overflow = '0'                                 report "Test_4: overflow incorrect"    severity Warning;
            assert zero = '0'                                        report "Test_4: zero incorrect"        severity Warning;
            
            report "Testing signed Add";
            opcode <= "1010";
     
            -- Test 5
            A <= conv_std_logic_vector(-2, 32);
            B <= conv_std_logic_vector(2, 32);
         
            wait for 10 ns;
            assert result = conv_std_logic_vector(0, 36)     report "Test_5: result incorrect"     severity Warning;
            assert carry = '0'                                 report "Test_5: carryout incorrect"    severity Warning;
            assert overflow = '0'                                 report "Test_5: overflow incorrect"    severity Warning;
            assert zero = '1'                                        report "Test_5: zero incorrect"        severity Warning;
	    
	    -- Test 6
            A <= conv_std_logic_vector(-20, 32);
            B <= conv_std_logic_vector(2, 32);
         
            wait for 10 ns;
            assert result = conv_std_logic_vector(24, 36)     report "Test_5: result incorrect"     severity Warning;
            assert carry = '0'                                 report "Test_5: carryout incorrect"    severity Warning;
            assert overflow = '0'                                 report "Test_5: overflow incorrect"    severity Warning;
            assert zero = '0'                                        report "Test_5: zero incorrect"        severity Warning; 
	    
	     -- Test 7
            A <= conv_std_logic_vector(-2, 32);
            B <= conv_std_logic_vector(-2, 32);
         
            wait for 10 ns;
            assert result = conv_std_logic_vector(-4, 36)     report "Test_7: result incorrect"     severity Warning;
            assert carry = '0'                                 report "Test_7: carryout incorrect"    severity Warning;
            assert overflow = '0'                                 report "Test_7: overflow incorrect"    severity Warning;
            assert zero = '0'                                        report "Test_7: zero incorrect"        severity Warning;    
            
            report "Testing signed Sub";
            opcode <= "1011";
     
            -- Test 8
            A <= conv_std_logic_vector(-2, 32);
            B <= conv_std_logic_vector(2, 32);
         
            wait for 10 ns;
            assert result = conv_std_logic_vector(0, 36)     report "Test_8: result incorrect"     severity Warning;
            assert carry = '0'                                 report "Test_8: carryout incorrect"    severity Warning;
            assert overflow = '0'                                 report "Test_8: overflow incorrect"    severity Warning;
            assert zero = '1'                                        report "Test_8: zero incorrect"        severity Warning;
	    
	    report "Testing signed Add";
            opcode <= "1010";
     
            -- Test 9
            A <= conv_std_logic_vector(-2, 32);
            B <= conv_std_logic_vector(10, 32);
         
            wait for 10 ns;
            assert result = conv_std_logic_vector(-12, 36)     report "Test_9: result incorrect"     severity Warning;
            assert carry = '0'                                 report "Test_9: carryout incorrect"    severity Warning;
            assert overflow = '0'                                 report "Test_9: overflow incorrect"    severity Warning;
            assert zero = '1'                                        report "Test_9: zero incorrect"        severity Warning;
	    
	    report "Testing signed Add";
            opcode <= "1010";
     
            -- Test 10
            A <= conv_std_logic_vector(2, 32);
            B <= conv_std_logic_vector(10, 32);
         
            wait for 10 ns;
            assert result = conv_std_logic_vector(-8, 36)     report "Test_10: result incorrect"     severity Warning;
            assert carry = '0'                                 report "Test_10: carryout incorrect"    severity Warning;
            assert overflow = '0'                                 report "Test_10: overflow incorrect"    severity Warning;
            assert zero = '0'                                        report "Test_10: zero incorrect"        severity Warning;
	    
        wait;
   end process;

END;
